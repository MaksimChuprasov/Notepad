import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

export async function registerForPushNotifications() {
  console.log('üëâ –ó–∞–ø—É—â–µ–Ω registerForPushNotifications');

  if (!Device.isDevice) {
    console.log('‚õî –≠—Ç–æ –Ω–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
    alert('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
    return;
  }

  const { status: existingStatus } = await Notifications.getPermissionsAsync();
  console.log('üîç –¢–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:', existingStatus);

  let finalStatus = existingStatus;

  if (existingStatus !== 'granted') {
    const { status } = await Notifications.requestPermissionsAsync();
    finalStatus = status;
    console.log('üìã –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', finalStatus);
  }

  if (finalStatus !== 'granted') {
    console.log('‚õî –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ù–ï –≤—ã–¥–∞–Ω–æ');
    alert('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
    return;
  }

  let token;
  try {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å push-—Ç–æ–∫–µ–Ω...');
    const tokenResponse = await Notifications.getExpoPushTokenAsync();
    console.log('–û—Ç–≤–µ—Ç getExpoPushTokenAsync:', tokenResponse);
    token = tokenResponse.data;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ getExpoPushTokenAsync:', e);
  }

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  return token;
}
